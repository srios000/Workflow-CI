name: Wine Quality MLOps CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up job
      run: echo "Starting Wine Quality MLOps workflow..."
    
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.12.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.7'
    
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: wine_quality_env
        python-version: '3.12.7'
        auto-activate-base: false
    
    - name: Check environment
      shell: bash -l {0}
      run: |
        python --version
        pip --version
        conda info
        conda list
    
    - name: Install dependencies
      shell: bash -l {0}
      run: |
        python -m pip install --upgrade pip
        pip install mlflow==2.19.0 dagshub==0.3.15 scikit-learn pandas numpy joblib python-dotenv fastapi uvicorn prometheus-client
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run MLflow project
      shell: bash -l {0}
      env:
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
        DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
        DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
      run: |
        cd MLProject
        # Run the Python script directly rather than using mlflow run
        python modelling.py --data_path winequality_preprocessing --model_type random_forest --tuning true
    
    - name: Get latest MLflow run_id
      shell: bash -l {0}
      run: |
        cd MLProject
        if [ -f best_tuned_model_run_id.txt ]; then
          LATEST_RUN_ID=$(cat best_tuned_model_run_id.txt)
          echo "LATEST_RUN_ID=$LATEST_RUN_ID" >> $GITHUB_ENV
          echo "Latest run ID: $LATEST_RUN_ID"
        elif [ -f best_model_run_id.txt ]; then
          LATEST_RUN_ID=$(cat best_model_run_id.txt)
          echo "LATEST_RUN_ID=$LATEST_RUN_ID" >> $GITHUB_ENV
          echo "Latest run ID: $LATEST_RUN_ID"
        else
          echo "No run ID file found"
        fi
    
    - name: Install Python dependencies for upload
      shell: bash -l {0}
      run: pip install gdown

    - name: Upload model files to GitHub Artifacts
      if: env.LATEST_RUN_ID != ''
      uses: actions/upload-artifact@v4
      with:
        name: wine-quality-model-${{ env.LATEST_RUN_ID }}
        path: MLProject/models/
        retention-days: 90
    
    - name: Build Docker model
      if: env.LATEST_RUN_ID != ''
      run: |
        cd MLProject
        echo "FROM python:3.12.7-slim" > Dockerfile
        echo "WORKDIR /app" >> Dockerfile
        echo "COPY requirements.txt ." >> Dockerfile
        echo "RUN pip install -r requirements.txt" >> Dockerfile
        echo "COPY . ." >> Dockerfile
        echo "EXPOSE 5000" >> Dockerfile
        echo "CMD [\"python\", \"serve_model.py\", \"--run_id\", \"$LATEST_RUN_ID\", \"--port\", \"5000\"]" >> Dockerfile
        docker build -t wine-quality-predictor:latest .
    
    - name: Login to Docker Hub
      if: env.LATEST_RUN_ID != ''
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Tag Docker image
      if: env.LATEST_RUN_ID != ''
      run: |
        docker tag wine-quality-predictor:latest ${{ secrets.DOCKERHUB_USERNAME }}/wine-quality-predictor:latest
        docker tag wine-quality-predictor:latest ${{ secrets.DOCKERHUB_USERNAME }}/wine-quality-predictor:${{ env.LATEST_RUN_ID }}
    
    - name: Push Docker image
      if: env.LATEST_RUN_ID != ''
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/wine-quality-predictor:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/wine-quality-predictor:${{ env.LATEST_RUN_ID }}
    
    - name: Post Login to Docker Hub
      if: always()
      run: echo "Docker image pushed successfully or workflow failed"
    
    - name: Post Set up Python 3.12.7
      if: always()
      run: echo "Workflow completed for Python 3.12.7"
    
    - name: Post Checkout repository
      if: always()
      run: echo "Repository processed successfully"
    
    - name: Complete job
      run: echo "Wine Quality MLOps workflow completed"